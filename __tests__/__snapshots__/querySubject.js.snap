// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Query subject * subject !* > [name="foo"] 1`] = `
> 1 | for (i = 0; i < foo.length; i++) {
    |                 ^^^ Identifier
  2 |   foo[i]();
  3 | }
  4 | 
> 1 | for (i = 0; i < foo.length; i++) {
    |                 ^^^^^^^^^^ MemberExpression
  2 |   foo[i]();
  3 | }
  4 | 
> 1 | for (i = 0; i < foo.length; i++) {
    |             ^^^^^^^^^^^^^^ BinaryExpression
  2 |   foo[i]();
  3 | }
  4 | 
> 1 | for (i = 0; i < foo.length; i++) {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 2 |   foo[i]();
    | ^^^^^^^^^^^
> 3 | }
    | ^^ ForStatement
  4 | 
> 1 | for (i = 0; i < foo.length; i++) {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 2 |   foo[i]();
    | ^^^^^^^^^^^
> 3 | }
    | ^^^^^^^^^^^
> 4 | 
    | ^ Program
> 1 | for (i = 0; i < foo.length; i++) {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 2 |   foo[i]();
    | ^^^^^^^^^^^
> 3 | }
    | ^^^^^^^^^^^
> 4 | 
    | ^ File
  1 | for (i = 0; i < foo.length; i++) {
> 2 |   foo[i]();
    |   ^^^ Identifier
  3 | }
  4 | 
  1 | for (i = 0; i < foo.length; i++) {
> 2 |   foo[i]();
    |   ^^^^^^ MemberExpression
  3 | }
  4 | 
  1 | for (i = 0; i < foo.length; i++) {
> 2 |   foo[i]();
    |   ^^^^^^^^ CallExpression
  3 | }
  4 | 
  1 | for (i = 0; i < foo.length; i++) {
> 2 |   foo[i]();
    |   ^^^^^^^^^ ExpressionStatement
  3 | }
  4 | 
> 1 | for (i = 0; i < foo.length; i++) {
    |                                  ^
> 2 |   foo[i]();
    | ^^^^^^^^^^^
> 3 | }
    | ^^ BlockStatement
  4 | 
> 1 | for (i = 0; i < foo.length; i++) {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 2 |   foo[i]();
    | ^^^^^^^^^^^
> 3 | }
    | ^^ ForStatement
  4 | 
> 1 | for (i = 0; i < foo.length; i++) {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 2 |   foo[i]();
    | ^^^^^^^^^^^
> 3 | }
    | ^^^^^^^^^^^
> 4 | 
    | ^ Program
> 1 | for (i = 0; i < foo.length; i++) {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 2 |   foo[i]();
    | ^^^^^^^^^^^
> 3 | }
    | ^^^^^^^^^^^
> 4 | 
    | ^ File
`;

exports[`Query subject :matches subject !:matches(*) > [name="foo"] 1`] = `
> 1 | for (i = 0; i < foo.length; i++) {
    |                 ^^^ Identifier
  2 |   foo[i]();
  3 | }
  4 | 
> 1 | for (i = 0; i < foo.length; i++) {
    |                 ^^^^^^^^^^ MemberExpression
  2 |   foo[i]();
  3 | }
  4 | 
> 1 | for (i = 0; i < foo.length; i++) {
    |             ^^^^^^^^^^^^^^ BinaryExpression
  2 |   foo[i]();
  3 | }
  4 | 
> 1 | for (i = 0; i < foo.length; i++) {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 2 |   foo[i]();
    | ^^^^^^^^^^^
> 3 | }
    | ^^ ForStatement
  4 | 
> 1 | for (i = 0; i < foo.length; i++) {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 2 |   foo[i]();
    | ^^^^^^^^^^^
> 3 | }
    | ^^^^^^^^^^^
> 4 | 
    | ^ Program
> 1 | for (i = 0; i < foo.length; i++) {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 2 |   foo[i]();
    | ^^^^^^^^^^^
> 3 | }
    | ^^^^^^^^^^^
> 4 | 
    | ^ File
  1 | for (i = 0; i < foo.length; i++) {
> 2 |   foo[i]();
    |   ^^^ Identifier
  3 | }
  4 | 
  1 | for (i = 0; i < foo.length; i++) {
> 2 |   foo[i]();
    |   ^^^^^^ MemberExpression
  3 | }
  4 | 
  1 | for (i = 0; i < foo.length; i++) {
> 2 |   foo[i]();
    |   ^^^^^^^^ CallExpression
  3 | }
  4 | 
  1 | for (i = 0; i < foo.length; i++) {
> 2 |   foo[i]();
    |   ^^^^^^^^^ ExpressionStatement
  3 | }
  4 | 
> 1 | for (i = 0; i < foo.length; i++) {
    |                                  ^
> 2 |   foo[i]();
    | ^^^^^^^^^^^
> 3 | }
    | ^^ BlockStatement
  4 | 
> 1 | for (i = 0; i < foo.length; i++) {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 2 |   foo[i]();
    | ^^^^^^^^^^^
> 3 | }
    | ^^ ForStatement
  4 | 
> 1 | for (i = 0; i < foo.length; i++) {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 2 |   foo[i]();
    | ^^^^^^^^^^^
> 3 | }
    | ^^^^^^^^^^^
> 4 | 
    | ^ Program
> 1 | for (i = 0; i < foo.length; i++) {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
> 2 |   foo[i]();
    | ^^^^^^^^^^^
> 3 | }
    | ^^^^^^^^^^^
> 4 | 
    | ^ File
`;

exports[`Query subject :not subject !:not(BlockStatement) > [name="foo"] 1`] = `
> 1 | function foo() {
    |          ^^^ Identifier
  2 |   var x = 1;
  3 |   function bar() {
  4 |     x = 2;
> 1 | function foo() {
    | ^^^^^^^^^^^^^^^
> 2 |   var x = 1;
    | ^^^^^^^^^^^^
> 3 |   function bar() {
    | ^^^^^^^^^^^^
> 4 |     x = 2;
    | ^^^^^^^^^^^^
> 5 |   }
    | ^^^^^^^^^^^^
> 6 | }
    | ^^ FunctionDeclaration
  7 | 
> 1 | function foo() {
    | ^^^^^^^^^^^^^^^
> 2 |   var x = 1;
    | ^^^^^^^^^^^^
> 3 |   function bar() {
    | ^^^^^^^^^^^^
> 4 |     x = 2;
    | ^^^^^^^^^^^^
> 5 |   }
    | ^^^^^^^^^^^^
> 6 | }
    | ^^^^^^^^^^^^
> 7 | 
    | ^ Program
> 1 | function foo() {
    | ^^^^^^^^^^^^^^^
> 2 |   var x = 1;
    | ^^^^^^^^^^^^
> 3 |   function bar() {
    | ^^^^^^^^^^^^
> 4 |     x = 2;
    | ^^^^^^^^^^^^
> 5 |   }
    | ^^^^^^^^^^^^
> 6 | }
    | ^^^^^^^^^^^^
> 7 | 
    | ^ File
`;

exports[`Query subject :nth-child subject !:nth-child(1) [name="y"] 1`] = `
> 1 | function foo(x, y) {
    | ^^^^^^^^^^^^^^^^^^^
> 2 |   var z = x + y;
    | ^^^^^^^^^^^^^^^^
> 3 |   z++;
    | ^^^^^^^^^^^^^^^^
> 4 |   return z;
    | ^^^^^^^^^^^^^^^^
> 5 | }
    | ^^ FunctionDeclaration
  6 | 
  1 | function foo(x, y) {
> 2 |   var z = x + y;
    |       ^^^^^^^^^ VariableDeclarator
  3 |   z++;
  4 |   return z;
  5 | }
  1 | function foo(x, y) {
> 2 |   var z = x + y;
    |   ^^^^^^^^^^^^^^ VariableDeclaration
  3 |   z++;
  4 |   return z;
  5 | }
> 1 | function foo(x, y) {
    | ^^^^^^^^^^^^^^^^^^^
> 2 |   var z = x + y;
    | ^^^^^^^^^^^^^^^^
> 3 |   z++;
    | ^^^^^^^^^^^^^^^^
> 4 |   return z;
    | ^^^^^^^^^^^^^^^^
> 5 | }
    | ^^ FunctionDeclaration
  6 | 
`;

exports[`Query subject :nth-last-child subject !:nth-last-child(1) [name="y"] 1`] = `
  1 | var x = 1;
> 2 | var y = "y";
    |     ^^^^^^^ VariableDeclarator
  3 | x = x * 2;
  4 | if (y) {
  5 |   y += "z";
  2 | var y = "y";
  3 | x = x * 2;
> 4 | if (y) {
    | ^^^^^^^
> 5 |   y += "z";
    | ^^^^^^^^^^^
> 6 | }
    | ^^ IfStatement
  7 | 
  3 | x = x * 2;
  4 | if (y) {
> 5 |   y += "z";
    |   ^^^^^^^^^ ExpressionStatement
  6 | }
  7 | 
  2 | var y = "y";
  3 | x = x * 2;
> 4 | if (y) {
    | ^^^^^^^
> 5 |   y += "z";
    | ^^^^^^^^^^^
> 6 | }
    | ^^ IfStatement
  7 | 
`;

exports[`Query subject adjacent right subject !VariableDeclaration + !ExpressionStatement 1`] = `
  1 | var x = 1;
> 2 | var y = "y";
    | ^^^^^^^^^^^^ VariableDeclaration
  3 | x = x * 2;
  4 | if (y) {
  5 |   y += "z";
  1 | var x = 1;
> 2 | var y = "y";
    | ^^^^^^^^^^^^ VariableDeclaration
  3 | x = x * 2;
  4 | if (y) {
  5 |   y += "z";
  1 | var x = 1;
  2 | var y = "y";
> 3 | x = x * 2;
    | ^^^^^^^^^^ ExpressionStatement
  4 | if (y) {
  5 |   y += "z";
  6 | }
`;

exports[`Query subject attribute literal subject ![test] [name="y"] 1`] = `
  2 | var y = "y";
  3 | x = x * 2;
> 4 | if (y) {
    | ^^^^^^^
> 5 |   y += "z";
    | ^^^^^^^^^^^
> 6 | }
    | ^^ IfStatement
  7 | 
  2 | var y = "y";
  3 | x = x * 2;
> 4 | if (y) {
    | ^^^^^^^
> 5 |   y += "z";
    | ^^^^^^^^^^^
> 6 | }
    | ^^ IfStatement
  7 | 
`;

exports[`Query subject attribute regexp subject ![operator=/=+/] > [name="x"] 1`] = `
> 1 | if (x === 1) {
    |     ^^^^^^^ BinaryExpression
  2 |   foo();
  3 | } else {
  4 |   x = 2;
  2 |   foo();
  3 | } else {
> 4 |   x = 2;
    |   ^^^^^ AssignmentExpression
  5 | }
  6 | if ((x == "test" && true) || x) {
  7 |   y = -1;
  4 |   x = 2;
  5 | }
> 6 | if ((x == "test" && true) || x) {
    |      ^^^^^^^^^^^ BinaryExpression
  7 |   y = -1;
  8 | } else if (false) {
  9 |   y = 1;
`;

exports[`Query subject attribute type subject ![generator=type(boolean)] > BlockStatement 1`] = `
> 1 | function foo() {
    | ^^^^^^^^^^^^^^^
> 2 |   var x = 1;
    | ^^^^^^^^^^^^
> 3 |   function bar() {
    | ^^^^^^^^^^^^
> 4 |     x = 2;
    | ^^^^^^^^^^^^
> 5 |   }
    | ^^^^^^^^^^^^
> 6 | }
    | ^^ FunctionDeclaration
  7 | 
  1 | function foo() {
  2 |   var x = 1;
> 3 |   function bar() {
    |   ^^^^^^^^^^^^^^^
> 4 |     x = 2;
    | ^^^^^^^^^^
> 5 |   }
    | ^^^^ FunctionDeclaration
  6 | }
  7 | 
> 1 | function foo() {
    | ^^^^^^^^^^^^^^^
> 2 |   var x = 1;
    | ^^^^^^^^^^^^
> 3 |   function bar() {
    | ^^^^^^^^^^^^
> 4 |     x = 2;
    | ^^^^^^^^^^^^
> 5 |   }
    | ^^^^^^^^^^^^
> 6 | }
    | ^^ FunctionDeclaration
  7 | 
`;

exports[`Query subject child right subject * > !AssignmentExpression 1`] = `
> 1 | for (i = 0; i < foo.length; i++) {
    |      ^^^^^ AssignmentExpression
  2 |   foo[i]();
  3 | }
  4 | 
`;

exports[`Query subject compound attributes subject ![left.name="x"][right.value=1] 1`] = `
> 1 | if (x === 1) {
    |     ^^^^^^^ BinaryExpression
  2 |   foo();
  3 | } else {
  4 |   x = 2;
`;

exports[`Query subject decendent right subject * !AssignmentExpression 1`] = `
> 1 | for (i = 0; i < foo.length; i++) {
    |      ^^^^^ AssignmentExpression
  2 |   foo[i]();
  3 | }
  4 | 
`;

exports[`Query subject field subject !.test 1`] = `
> 1 | for (i = 0; i < foo.length; i++) {
    |             ^^^^^^^^^^^^^^ BinaryExpression
  2 |   foo[i]();
  3 | }
  4 | 
`;

exports[`Query subject multiple adjacent siblings Identifier + Identifier 1`] = `
> 1 | [1, 2, 3, foo, bar, 4, 5, baz, qux, 6];
    |                ^^^ Identifier
  2 | 
> 1 | [1, 2, 3, foo, bar, 4, 5, baz, qux, 6];
    |                                ^^^ Identifier
  2 | 
`;

exports[`Query subject multiple siblings Identifier ~ Identifier 1`] = `
> 1 | [1, 2, 3, foo, bar, 4, 5, baz, qux, 6];
    |                ^^^ Identifier
  2 | 
> 1 | [1, 2, 3, foo, bar, 4, 5, baz, qux, 6];
    |                           ^^^ Identifier
  2 | 
> 1 | [1, 2, 3, foo, bar, 4, 5, baz, qux, 6];
    |                                ^^^ Identifier
  2 | 
`;

exports[`Query subject sibling left subject !VariableDeclaration ~ IfStatement 1`] = `
> 1 | var x = 1;
    | ^^^^^^^^^^ VariableDeclaration
  2 | var y = "y";
  3 | x = x * 2;
  4 | if (y) {
  1 | var x = 1;
> 2 | var y = "y";
    | ^^^^^^^^^^^^ VariableDeclaration
  3 | x = x * 2;
  4 | if (y) {
  5 |   y += "z";
`;

exports[`Query subject sibling right subject !VariableDeclaration ~ !IfStatement 1`] = `
> 1 | var x = 1;
    | ^^^^^^^^^^ VariableDeclaration
  2 | var y = "y";
  3 | x = x * 2;
  4 | if (y) {
> 1 | var x = 1;
    | ^^^^^^^^^^ VariableDeclaration
  2 | var y = "y";
  3 | x = x * 2;
  4 | if (y) {
  1 | var x = 1;
> 2 | var y = "y";
    | ^^^^^^^^^^^^ VariableDeclaration
  3 | x = x * 2;
  4 | if (y) {
  5 |   y += "z";
  1 | var x = 1;
> 2 | var y = "y";
    | ^^^^^^^^^^^^ VariableDeclaration
  3 | x = x * 2;
  4 | if (y) {
  5 |   y += "z";
  2 | var y = "y";
  3 | x = x * 2;
> 4 | if (y) {
    | ^^^^^^^
> 5 |   y += "z";
    | ^^^^^^^^^^^
> 6 | }
    | ^^ IfStatement
  7 | 
`;

exports[`Query subject type subject !IfStatement Identifier 1`] = `
> 1 | if (x === 1) {
    | ^^^^^^^^^^^^^
> 2 |   foo();
    | ^^^^^^^^
> 3 | } else {
    | ^^^^^^^^
> 4 |   x = 2;
    | ^^^^^^^^
> 5 | }
    | ^^ IfStatement
  6 | if ((x == "test" && true) || x) {
  7 |   y = -1;
  8 | } else if (false) {
> 1 | if (x === 1) {
    | ^^^^^^^^^^^^^
> 2 |   foo();
    | ^^^^^^^^
> 3 | } else {
    | ^^^^^^^^
> 4 |   x = 2;
    | ^^^^^^^^
> 5 | }
    | ^^ IfStatement
  6 | if ((x == "test" && true) || x) {
  7 |   y = -1;
  8 | } else if (false) {
> 1 | if (x === 1) {
    | ^^^^^^^^^^^^^
> 2 |   foo();
    | ^^^^^^^^
> 3 | } else {
    | ^^^^^^^^
> 4 |   x = 2;
    | ^^^^^^^^
> 5 | }
    | ^^ IfStatement
  6 | if ((x == "test" && true) || x) {
  7 |   y = -1;
  8 | } else if (false) {
   4 |   x = 2;
   5 | }
>  6 | if ((x == "test" && true) || x) {
     | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>  7 |   y = -1;
     | ^^^^^^^^^
>  8 | } else if (false) {
     | ^^^^^^^^^
>  9 |   y = 1;
     | ^^^^^^^^^
> 10 | }
     | ^^ IfStatement
  11 | 
   4 |   x = 2;
   5 | }
>  6 | if ((x == "test" && true) || x) {
     | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>  7 |   y = -1;
     | ^^^^^^^^^
>  8 | } else if (false) {
     | ^^^^^^^^^
>  9 |   y = 1;
     | ^^^^^^^^^
> 10 | }
     | ^^ IfStatement
  11 | 
   4 |   x = 2;
   5 | }
>  6 | if ((x == "test" && true) || x) {
     | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>  7 |   y = -1;
     | ^^^^^^^^^
>  8 | } else if (false) {
     | ^^^^^^^^^
>  9 |   y = 1;
     | ^^^^^^^^^
> 10 | }
     | ^^ IfStatement
  11 | 
   6 | if ((x == "test" && true) || x) {
   7 |   y = -1;
>  8 | } else if (false) {
     |        ^^^^^^^^^^^
>  9 |   y = 1;
     | ^^^^^^^^
> 10 | }
     | ^^ IfStatement
  11 | 
   4 |   x = 2;
   5 | }
>  6 | if ((x == "test" && true) || x) {
     | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
>  7 |   y = -1;
     | ^^^^^^^^^
>  8 | } else if (false) {
     | ^^^^^^^^^
>  9 |   y = 1;
     | ^^^^^^^^^
> 10 | }
     | ^^ IfStatement
  11 | 
`;
